name: CI-CD Pipeline

on:
  push:
    branches:
      - "master"
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r src/testng.txt

      - name: Run Black
        run: black --check ./src

      - name: Run Flake8
        run: flake8 ./src

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Commit Hash
        run: echo "GIT_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Tag Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-backend
          docker build -t $BACKEND_IMAGE:latest -t $BACKEND_IMAGE:$GIT_COMMIT_HASH -f ./src/Dockerfile ./src

      - name: Push Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-backend
          docker push $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:$GIT_COMMIT_HASH

      - name: Build and Tag Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-frontend
          docker build -t $FRONTEND_IMAGE:latest -t $FRONTEND_IMAGE:$GIT_COMMIT_HASH -f ./frontend/Dockerfile ./frontend

      - name: Push Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-frontend
          docker push $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:$GIT_COMMIT_HASH

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Get Commit Hash
        run: echo "GIT_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace GIT_COMMIT_HASH in stack.yml
        run: |
          envsubst < stack.yml > stack_deploy.yml
          cat stack_deploy.yml

      - name: Create deployment directory on server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USER }}
          key: ${{ secrets.VDS_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.VDS_USER }}

      - name: Upload stack file via scp
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USER }}
          key: ${{ secrets.VDS_SSH_KEY }}
          source: "./stack_deploy.yml"
          target: "/home/${{ secrets.VDS_USER }}/"
          overwrite: true
          strip_components: 0

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USER }}
          key: ${{ secrets.VDS_SSH_KEY }}
          script: |
            export GIT_COMMIT_HASH=$(git rev-parse --short HEAD)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            docker pull ghcr.io/${{ github.repository_owner }}/is_schedule-backend:$GIT_COMMIT_HASH
            docker pull ghcr.io/${{ github.repository_owner }}/is_schedule-frontend:latest
            
            docker stack deploy -c /home/${{ secrets.VDS_USER }}/stack.yml is_schedule_stack
            
            NETWORK_NAME=$(docker network ls --format '{{.Name}}' | grep "is_schedule_stack_is_schedule_network")
            
            docker run --rm \
              --network $NETWORK_NAME \
              ghcr.io/${{ github.repository_owner }}/is_schedule-backend:$GIT_COMMIT_HASH \
              sh -c "python timetable/manage.py migrate && python timetable/manage.py collectstatic --noinput"
