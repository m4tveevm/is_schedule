name: CI-CD Pipeline

on:
  push:
<<<<<<< HEAD
    branches:
      - "master"
  workflow_dispatch:
=======
    branches: ["master"]
>>>>>>> master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r testng.txt

      - name: Run Black
        run: black --check .

      - name: Run Flake8
        run: flake8 .

      # todo: add Unittests and django tests

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

<<<<<<< HEAD
      - name: Build and Tag Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-backend
          docker build -t $BACKEND_IMAGE:latest -f ./src/Dockerfile ./src
          docker tag $BACKEND_IMAGE:latest $BACKEND_IMAGE:${{ github.run_number }}

      - name: Push Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-backend
          docker push $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:${{ github.run_number }}
=======
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./src
          file: ./src/Dockerfile
          tags: ghcr.io/${{ github.repository_owner }}/backend:latest
          push: true

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: ghcr.io/${{ github.repository_owner }}/frontend:latest
          push: true
>>>>>>> master

      - name: Build and Tag Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-frontend
          docker build -t $FRONTEND_IMAGE:latest -f ./frontend/Dockerfile ./frontend
          docker tag $FRONTEND_IMAGE:latest $FRONTEND_IMAGE:${{ github.run_number }}

      - name: Push Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-frontend
          docker push $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USER }}
          key: ${{ secrets.VDS_SSH_KEY }}
          script: |
<<<<<<< HEAD
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull ghcr.io/${{ github.repository_owner }}/is_schedule-backend:latest
            docker pull ghcr.io/${{ github.repository_owner }}/is_schedule-frontend:latest

            # docker pull ghcr.io/${{ github.repository_owner }}/is_schedule-backend:${{ github.run_number }}
            # docker pull ghcr.io/${{ github.repository_owner }}/is_schedule-frontend:${{ github.run_number }}

            docker run --rm \
            --network host \
            -e DJANGO_DB_HOST=db \
            -e DJANGO_DB_NAME=postgres \
            -e DJANGO_DB_USER=postgres \
            -e DJANGO_DB_PASSWORD=${{ secrets.PG_PASSWORD }} \
            ghcr.io/${{ github.repository_owner }}/is_schedule-backend:latest \
            sh -c "python timetable/manage.py migrate && python timetable/manage.py collectstatic --noinput"
           
            docker stack deploy -c /home/deploy_user/stack.yml is_schedule_stack

            # docker-compose -f /home/deploy_user/docker-compose.yml pull
            # docker-compose -f /home/deploy_user/docker-compose.yml up -d --remove-orphans
=======
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository_owner }}/backend:latest
            docker pull ghcr.io/${{ github.repository_owner }}/frontend:latest
            docker stack deploy -c /home/deploy_user/stack.yml mystack
>>>>>>> master
