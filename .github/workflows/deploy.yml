name: CI-CD Pipeline

on:
  push:
    branches:
      - "master"
  workflow_dispatch:


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r src/testng.txt

      - name: Run Black
        run: black --check ./src

      - name: Run Flake8
        run: flake8 ./src

      # todo: add Unittests and django tests

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Tag Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-backend
          docker build -t $BACKEND_IMAGE:latest -f ./src/Dockerfile ./src
          docker tag $BACKEND_IMAGE:latest $BACKEND_IMAGE:${{ github.run_number }}

      - name: Push Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-backend
          docker push $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:${{ github.run_number }}

      - name: Build and Tag Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-frontend
          docker build -t $FRONTEND_IMAGE:latest -f ./frontend/Dockerfile ./frontend
          docker tag $FRONTEND_IMAGE:latest $FRONTEND_IMAGE:${{ github.run_number }}

      - name: Push Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/is_schedule-frontend
          docker push $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Upload stack file via scp
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USER }}
          key: ${{ secrets.VDS_SSH_KEY }}
          source: "./stack.yml"
          target: "/home/${{ secrets.VDS_USER }}"
          overwrite: true
          strip_components: 0

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USER }}
          key: ${{ secrets.VDS_SSH_KEY }}
          script: |
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull ghcr.io/.../is_schedule-backend:latest
            docker pull ghcr.io/.../is_schedule-frontend:latest

            docker network ls

            docker stack deploy -c /home/${{ secrets.VDS_USER }}/stack.yml is_schedule_stack


            docker run --rm \
              --network is_schedule_app_network \
              -e DJANGO_DB_HOST=db \
              -e DJANGO_DB_NAME=postgres \
              -e DJANGO_DB_USER=postgres \
              -e DJANGO_DB_PASSWORD=${{ secrets.PG_PASSWORD }} \
              ghcr.io/.../is_schedule-backend:latest \
              sh -c "python timetable/manage.py migrate && python timetable/manage.py collectstatic --noinput"
