services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"
      - "--accesslog.filters.statusCodes=400-499"
      - "--certificatesresolvers.cloudflareResolver.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflareResolver.acme.email=m4tveevm@icloud.com"
      - "--certificatesresolvers.cloudflareResolver.acme.storage=/acme.json"
    environment:
      - CLOUDFLARE_EMAIL=m4tveevm@icloud.com
      - CLOUDFLARE_API_TOKEN=/run/secrets/cloudflare_api_token
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/logs
      - ./acme.json:/acme.json
    secrets:
      - cloudflare_api_token
    networks:
      - is_schedule_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.is_schedule_stack.rule=Host(`is-schedule.updspace.com`)"
      - "traefik.http.routers.is_schedule_stack.entrypoints=websecure"
      - "traefik.http.routers.is_schedule_stack.tls=true"
      - "traefik.http.routers.is_schedule_stack.tls.certresolver=cloudflareResolver"
      - "traefik.http.routers.is_schedule_stack.tls.domains[0].main=is-schedule.updspace.com"
      - "traefik.http.routers.is_schedule_stack.tls.domains[0].sans=*.is-schedule.updspace.com"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.is-schedule.updspace.com`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflareResolver"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  backend:
    image: ghcr.io/m4tveevm/is_schedule-backend:latest
    environment:
      - DJANGO_DB_HOST=db
      - DJANGO_DB_NAME=postgres
      - DJANGO_DB_USER=postgres
    networks:
      - is_schedule_network
    secrets:
      - source: pg_password
        target: POSTGRES_PASSWORD
      - django_secret
    ports:
      - "8000:8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`is-schedule.updspace.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    deploy:
      replicas: 2

  frontend:
    image: ghcr.io/m4tveevm/is_schedule-frontend:latest
    environment:
      - REACT_APP_BACKEND_URL=https://is-schedule.updspace.com/api/
    networks:
      - is_schedule_network
    ports:
      - "80:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`is-schedule.updspace.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=cloudflareResolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    deploy:
      replicas: 2

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    secrets:
      - source: pg_password
        target: POSTGRES_PASSWORD
    networks:
      - is_schedule_network
    deploy:
      restart_policy:
        condition: any

networks:
  is_schedule_network:
    external: true
    name: is_schedule_network

volumes:
  postgres_data:

secrets:
  pg_password:
    external: true
  django_secret:
    external: true
  cloudflare_api_token:
    external: true
