services:
  traefik:
    image: traefik:v3.1
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.swarm=true"
      - "--providers.swarm.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--log.level=DEBUG"

      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1,1.0.0.1"
      - "--certificatesresolvers.cloudflare.acme.email=m4tveevm@icloud.com"
      - "--certificatesresolvers.cloudflare.acme.storage=/acme/acme.json"

      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=cloudflare"
    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme:/acme
    networks:
      - is_schedule_network
    secrets:
      - cloudflare_api_token
    environment:
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_api_token
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.updspace.com`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"

  backend:
    image: ghcr.io/m4tveevm/is_schedule-backend:latest
    environment:
      - DJANGO_DB_HOST=db
      - DJANGO_DB_NAME=postgres
      - DJANGO_DB_USER=postgres
    networks:
      - is_schedule_network
    secrets:
      - pg_password
      - django_secret
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`is-schedule.updspace.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=cloudflare"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        order: start-first
    ports:
      - "8000:8000"

  frontend:
    image: ghcr.io/m4tveevm/is_schedule-frontend:latest
    environment:
      - REACT_APP_BACKEND_URL=https://is-schedule.updspace.com/api/
    networks:
      - is_schedule_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`is-schedule.updspace.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=cloudflare"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    ports:
      - "80:80"


  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_LISTEN_ADDRESSES=*
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
    secrets:
      - pg_password
    networks:
      - is_schedule_network
    ports:
      - "5432:5432"
    deploy:
      restart_policy:
        condition: any
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  is_schedule_network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:

secrets:
  pg_password:
    external: true
  django_secret:
    external: true
  cloudflare_api_token:
    external: true
